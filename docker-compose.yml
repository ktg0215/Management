services:
  # PostgreSQLデータベース
  postgres:
    image: postgres:15-alpine
    container_name: management-db
    environment:
      POSTGRES_DB: shift_management
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres123
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/migrations:/docker-entrypoint-initdb.d
    networks:
      - app-network

  # バックエンドAPI
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: management-backend
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://postgres:postgres123@postgres:5432/shift_management
      - PORT=3001
    ports:
      - "3001:3001"
    depends_on:
      - postgres
    volumes:
      - ./backend:/app
      - /app/node_modules
    networks:
      - app-network
    restart: unless-stopped

  # フロントエンド（Next.js）
  frontend:
    build:
      context: ./next-app
      dockerfile: Dockerfile.dev
    container_name: management-frontend
    environment:
      - NODE_ENV=development
      - NEXT_PUBLIC_API_URL=http://localhost:3001
      - BACKEND_URL=http://management-backend:3001
      - HOSTNAME=0.0.0.0
      - PORT=3000
    ports:
      - "3000:3000"
    depends_on:
      - backend
    volumes:
      - ./next-app:/app
      - /app/node_modules
      - /app/.next
    networks:
      - app-network
    restart: unless-stopped
    command: ["npm", "run", "dev"]

  # Nginx（リバースプロキシ）
  nginx:
    image: nginx:alpine
    container_name: management-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - backend
    networks:
      - app-network
    restart: unless-stopped

volumes:
  postgres_data:

networks:
  app-network:
    driver: bridge 